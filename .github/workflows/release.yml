name: Build, Deploy and Release

on:
  push:
    branches:
      - 'main'
    paths:
      - 'pyproject.toml'

permissions:
  contents: write

jobs:
  format-lint:
    name: "Format and Lint"
    uses: ./.github/workflows/_format-lint-action.yml
    with:
      python-version: '3.9'
  check-coverage:
    name: "Check Coverage"
    needs: [format-lint]
    uses: ./.github/workflows/_check-coverage-action.yml
    permissions:
      pull-requests: write
    with:
      required-coverage: ${{ vars.REQUIRED_COVERAGE }}
      coverage-module: "geneweaver.api"
  test:
    name: "Run Tests"
    needs: [check-coverage, format-lint]
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11']
    uses: ./.github/workflows/_run-tests-action.yml
    with:
      runner-os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}
      required-coverage: ${{ vars.REQUIRED_COVERAGE }}
  version:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      prerelease: ${{ steps.version_check.outputs.prerelease }}
      version: ${{ steps.version_check.outputs.version }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        pip install toml
    - name: Check for version change
      id: version_check
      run: |
        # Extract version from pyproject.toml
        version=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
        echo "Version=$version"
        echo "version=$version" >> $GITHUB_OUTPUT

        # Check if this version tag already exists
        if git rev-parse "v$version" >/dev/null 2>&1; then
            echo "Version already released"
            echo "should_release=true" >> $GITHUB_OUTPUT
        else
            echo "New version detected"
            echo "should_release=false" >> $GITHUB_OUTPUT
        fi
    - name: Determine Release Type
      id: release_type
      run: |
        version=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
        if [[ $version =~ [a-zA-Z] ]]; then
          echo "Pre-release version detected"
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "Full release version detected"
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi
  build:
    name: "Build"
    needs: [ test, check-coverage, format-lint, version ]
    if: ${{ needs.version.outputs.should_release }} == 'true'
    uses: ./.github/workflows/_skaffold-build-k8s.yml
    secrets: inherit
  deploy_sqa:
    name: "Deploy: SQA"
    needs: [build, version]
    if: ${{ needs.version.outputs.should_release }} == 'true'
    uses: ./.github/workflows/_skaffold-deploy-k8s.yml
    secrets: inherit
    with:
      environment: "jax-cluster-dev-10--sqa"
  deploy_stage:
    name: "Deploy: Stage"
    needs: [ build, version, deploy_sqa]
    if: ${{ needs.version.outputs.should_release == 'true' && needs.version.outputs.prerelease == 'false'}}
    uses: ./.github/workflows/_skaffold-deploy-k8s.yml
    secrets: inherit
    with:
      environment: "jax-cluster-prod-10--stage"
  deploy_prod:
    name: "Deploy: Prod"
    needs: [ build, version, deploy_stage]
    if: ${{ needs.version.outputs.should_release == 'true' && needs.version.outputs.prerelease == 'false'}}
    uses: ./.github/workflows/_skaffold-deploy-k8s.yml
    secrets: inherit
    with:
      environment: "jax-cluster-prod-10--prod"
  release:
    name: "Create Github Release Draft"
    runs-on: ubuntu-latest
    needs: [ deploy_prod ]
    if: ${{ needs.version.outputs.should_release == 'true' && needs.version.outputs.prerelease == 'false'}}
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_check.outputs.version }}
          name: Release v${{ needs.version.outputs.version }}
          draft: true
          prerelease: ${{ needs.version.outputs.prerelease }}
          body: |
            Release v${{ needs.version.outputs.version }}
          files: |
            dist/*
            LICENSE
            README.md